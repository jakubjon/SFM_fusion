"""
Step 2: Global camera calibration adjustment (using selected distortion model radial by default)
"""

import numpy as np
from pathlib import Path
from datetime import datetime
from step_base import StepBase
import config


class GlobalCalibrationStep(StepBase):
    """Step 2: Global camera calibration adjustment"""
    
    def __init__(self, output_dir=config.OUTPUT_DIR):
        super().__init__(output_dir)
        self.global_camera_params = None
    
    def get_input_requirements(self):
        """Return required inputs for this step"""
        return ["step1_local_sfm_results"]
    
    def get_output_files(self):
        """Return output files generated by this step"""
        return [
            "intermediate/global_calibration.json",
            "intermediate/step2_global_calibration_results.json"
        ]
    
    def estimate_global_camera_calibration(self, local_calibrations):
        """Estimate global camera calibration from all local calibrations"""
        self.log_step("Global camera intrinsic determination")
        
        if not local_calibrations:
            print("No local calibrations available")
            return None
        
        # Average the pinhole parameters from all local calibrations
        all_params = []
        ref_calibration = None
        
        for painting_name, calibration in local_calibrations.items():
            params = calibration['params']
            if len(params) >= 3:  # Ensure we have at least fx, cx, cy
                all_params.append(params[:3])  # Take only first 3 parameters
                if ref_calibration is None:
                    ref_calibration = calibration
                print(f"  {painting_name}: focal_length={params[0]:.2f}, cx={params[1]:.2f}, cy={params[2]:.2f}")
        
        if not all_params:
            print("No valid local calibrations found")
            return None
        
        # Calculate average calibration
        avg_params = np.mean(all_params, axis=0)
        print(f"Average calibration: focal_length={avg_params[0]:.2f}, cx={avg_params[1]:.2f}, cy={avg_params[2]:.2f}")
        
        # Convert to SIMPLE_RADIAL model for global calibration
        global_params = list(avg_params)
        if len(global_params) == 3:
            # Estimate radial distortion based on focal length
            # A rough estimate: k1 = -0.0001 * (focal_length / 1000)^2
            focal_length = global_params[0]
            estimated_k1 = -0.0001 * (focal_length / 1000) ** 2
            global_params.append(estimated_k1)
            print(f"Estimated radial distortion k1: {estimated_k1:.6f}")
        
        # Use reference calibration for image dimensions
        if ref_calibration:
            self.global_camera_params = {
                'width': ref_calibration['width'],
                'height': ref_calibration['height'],
                'params': global_params,
                'model': 'SIMPLE_RADIAL'  # Use more complex model for global calibration
            }
        else:
            # Fallback to default parameters
            self.global_camera_params = config.DEFAULT_CAMERA_PARAMS.copy()
            self.global_camera_params['params'] = global_params
        
        print(f"Global camera calibration: focal_length={global_params[0]:.2f}, k1={global_params[3]:.6f}")
        return self.global_camera_params
    
    def compare_local_calibrations(self, local_calibrations):
        """Compare local camera calibration results"""
        self.log_step("Comparison between local camera calibration results")
        
        if not local_calibrations:
            print("No local calibrations to compare")
            return
        
        print("Local camera calibrations:")
        focal_lengths = []
        cx_values = []
        cy_values = []
        
        for painting_name, calibration in local_calibrations.items():
            params = calibration['params']
            if len(params) >= 3:
                focal_lengths.append(params[0])
                cx_values.append(params[1])
                cy_values.append(params[2])
                print(f"  {painting_name}: focal_length={params[0]:.2f}, cx={params[1]:.2f}, cy={params[2]:.2f}")
        
        if len(focal_lengths) > 1:
            print(f"\nStatistics:")
            print(f"  Focal length: mean={np.mean(focal_lengths):.2f}, std={np.std(focal_lengths):.2f}")
            print(f"  Principal point X: mean={np.mean(cx_values):.2f}, std={np.std(cx_values):.2f}")
            print(f"  Principal point Y: mean={np.mean(cy_values):.2f}, std={np.std(cy_values):.2f}")
    
    def run(self, **kwargs):
        """
        Perform global camera calibration adjustment.
        
        Args:
            local_calibrations (dict): Local camera calibrations from Step 1
            
        Returns:
            dict: Results containing global camera parameters
        """
        self.log_step("Step 2: Global camera calibration adjustment")
        
        # Load local calibrations from Step 1
        step1_results = self.load_result("step1_local_sfm_results")
        if not step1_results:
            print("[ERROR] Step 1 results not found. Please run Step 1 first.")
            return None
        
        local_calibrations = step1_results.get('local_calibrations', {})
        
        if not local_calibrations:
            print("[ERROR] No local calibrations found in Step 1 results.")
            return None
        
        # Compare local calibrations
        self.compare_local_calibrations(local_calibrations)
        
        # Estimate global calibration
        global_params = self.estimate_global_camera_calibration(local_calibrations)
        
        if not global_params:
            print("[ERROR] Failed to estimate global camera calibration.")
            return None
        
        # Save global calibration
        calibration_data = {
            'global_camera_params': global_params,
            'local_calibrations': local_calibrations,
            'num_paintings': len(local_calibrations),
            'timestamp': datetime.now().isoformat()
        }
        

        self.save_result("global_calibration", calibration_data)
        
        # Save step results
        step_results = {
            'global_camera_params': global_params,
            'local_calibrations': local_calibrations,
            'num_paintings': len(local_calibrations),
            'focal_length': global_params['params'][0],
            'radial_distortion_k1': global_params['params'][3] if len(global_params['params']) > 3 else 0.0,
            'timestamp': datetime.now().isoformat()
        }
        
        self.save_result("step2_global_calibration_results", step_results)
        
        print(f"[OK] Global calibration completed. Focal length: {global_params['params'][0]:.2f}, k1: {global_params['params'][3]:.6f}")
        
        return step_results


if __name__ == "__main__":
    # Test the step independently
    step = GlobalCalibrationStep()
    results = step.run()
    if results:
        print(f"Step 2 completed. Global calibration estimated for {results['num_paintings']} paintings.") 